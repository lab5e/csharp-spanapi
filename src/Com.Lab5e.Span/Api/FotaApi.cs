/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.1.7 only-deshaun
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.Span.Client;
using Com.Lab5e.Span.Model;

namespace Com.Lab5e.Span.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Object</returns>
        Object SpanClearFirmwareError(string collectionId, string deviceId);

        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SpanClearFirmwareErrorWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <returns>Firmware</returns>
        Firmware SpanCreateFirmware(string collectionId, CreateFirmwareRequest body);

        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> SpanCreateFirmwareWithHttpInfo(string collectionId, CreateFirmwareRequest body);
        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>Firmware</returns>
        Firmware SpanDeleteFirmware(string collectionId, string imageId);

        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> SpanDeleteFirmwareWithHttpInfo(string collectionId, string imageId);
        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// Shows the firmware usage for devices in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>FirmwareUsageResponse</returns>
        FirmwareUsageResponse SpanFirmwareUsage(string collectionId, string imageId);

        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// Shows the firmware usage for devices in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of FirmwareUsageResponse</returns>
        ApiResponse<FirmwareUsageResponse> SpanFirmwareUsageWithHttpInfo(string collectionId, string imageId);
        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// Lists available firmware images in collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListFirmwareResponse</returns>
        ListFirmwareResponse SpanListFirmware(string collectionId);

        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// Lists available firmware images in collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListFirmwareResponse</returns>
        ApiResponse<ListFirmwareResponse> SpanListFirmwareWithHttpInfo(string collectionId);
        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// Retrieve information on a firmware image
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>Firmware</returns>
        Firmware SpanRetrieveFirmware(string collectionId, string imageId);

        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// Retrieve information on a firmware image
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> SpanRetrieveFirmwareWithHttpInfo(string collectionId, string imageId);
        /// <summary>
        /// Update firmware
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <returns>Firmware</returns>
        Firmware SpanUpdateFirmware(string collectionId, string imageId, Firmware body);

        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> SpanUpdateFirmwareWithHttpInfo(string collectionId, string imageId, Firmware body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SpanClearFirmwareErrorAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpanClearFirmwareErrorWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> SpanCreateFirmwareAsync(string collectionId, CreateFirmwareRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> SpanCreateFirmwareWithHttpInfoAsync(string collectionId, CreateFirmwareRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> SpanDeleteFirmwareAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> SpanDeleteFirmwareWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// Shows the firmware usage for devices in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareUsageResponse</returns>
        System.Threading.Tasks.Task<FirmwareUsageResponse> SpanFirmwareUsageAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// Shows the firmware usage for devices in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareUsageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmwareUsageResponse>> SpanFirmwareUsageWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// Lists available firmware images in collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFirmwareResponse</returns>
        System.Threading.Tasks.Task<ListFirmwareResponse> SpanListFirmwareAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// Lists available firmware images in collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFirmwareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFirmwareResponse>> SpanListFirmwareWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// Retrieve information on a firmware image
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> SpanRetrieveFirmwareAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// Retrieve information on a firmware image
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> SpanRetrieveFirmwareWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> SpanUpdateFirmwareAsync(string collectionId, string imageId, Firmware body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> SpanUpdateFirmwareWithHttpInfoAsync(string collectionId, string imageId, Firmware body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApi : IFotaApiSync, IFotaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FotaApi : IFotaApi
    {
        private Com.Lab5e.Span.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FotaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FotaApi(String basePath)
        {
            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.Span.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FotaApi(Com.Lab5e.Span.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FotaApi(Com.Lab5e.Span.Client.ISynchronousClient client, Com.Lab5e.Span.Client.IAsynchronousClient asyncClient, Com.Lab5e.Span.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.Span.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.Span.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Object</returns>
        public Object SpanClearFirmwareError(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = SpanClearFirmwareErrorWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Object> SpanClearFirmwareErrorWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanClearFirmwareError");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->SpanClearFirmwareError");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/collections/{collectionId}/devices/{deviceId}/fwerror", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanClearFirmwareError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SpanClearFirmwareErrorAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = await SpanClearFirmwareErrorWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Object>> SpanClearFirmwareErrorWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanClearFirmwareError");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->SpanClearFirmwareError");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/collections/{collectionId}/devices/{deviceId}/fwerror", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanClearFirmwareError", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create firmware Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <returns>Firmware</returns>
        public Firmware SpanCreateFirmware(string collectionId, CreateFirmwareRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = SpanCreateFirmwareWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create firmware Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> SpanCreateFirmwareWithHttpInfo(string collectionId, CreateFirmwareRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanCreateFirmware");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->SpanCreateFirmware");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Firmware>("/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanCreateFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create firmware Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> SpanCreateFirmwareAsync(string collectionId, CreateFirmwareRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await SpanCreateFirmwareWithHttpInfoAsync(collectionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create firmware Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> SpanCreateFirmwareWithHttpInfoAsync(string collectionId, CreateFirmwareRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanCreateFirmware");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->SpanCreateFirmware");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Firmware>("/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanCreateFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>Firmware</returns>
        public Firmware SpanDeleteFirmware(string collectionId, string imageId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = SpanDeleteFirmwareWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> SpanDeleteFirmwareWithHttpInfo(string collectionId, string imageId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanDeleteFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanDeleteFirmware");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanDeleteFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> SpanDeleteFirmwareAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await SpanDeleteFirmwareWithHttpInfoAsync(collectionId, imageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> SpanDeleteFirmwareWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanDeleteFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanDeleteFirmware");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanDeleteFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Firmware usage Shows the firmware usage for devices in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>FirmwareUsageResponse</returns>
        public FirmwareUsageResponse SpanFirmwareUsage(string collectionId, string imageId)
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> localVarResponse = SpanFirmwareUsageWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Firmware usage Shows the firmware usage for devices in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of FirmwareUsageResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> SpanFirmwareUsageWithHttpInfo(string collectionId, string imageId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanFirmwareUsage");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanFirmwareUsage");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<FirmwareUsageResponse>("/collections/{collectionId}/firmware/{imageId}/usage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanFirmwareUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Firmware usage Shows the firmware usage for devices in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareUsageResponse</returns>
        public async System.Threading.Tasks.Task<FirmwareUsageResponse> SpanFirmwareUsageAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> localVarResponse = await SpanFirmwareUsageWithHttpInfoAsync(collectionId, imageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Firmware usage Shows the firmware usage for devices in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareUsageResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse>> SpanFirmwareUsageWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanFirmwareUsage");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanFirmwareUsage");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<FirmwareUsageResponse>("/collections/{collectionId}/firmware/{imageId}/usage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanFirmwareUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List firmware Lists available firmware images in collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListFirmwareResponse</returns>
        public ListFirmwareResponse SpanListFirmware(string collectionId)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> localVarResponse = SpanListFirmwareWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List firmware Lists available firmware images in collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListFirmwareResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> SpanListFirmwareWithHttpInfo(string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanListFirmware");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFirmwareResponse>("/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List firmware Lists available firmware images in collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFirmwareResponse</returns>
        public async System.Threading.Tasks.Task<ListFirmwareResponse> SpanListFirmwareAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> localVarResponse = await SpanListFirmwareWithHttpInfoAsync(collectionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List firmware Lists available firmware images in collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFirmwareResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse>> SpanListFirmwareWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanListFirmware");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFirmwareResponse>("/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware Retrieve information on a firmware image
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>Firmware</returns>
        public Firmware SpanRetrieveFirmware(string collectionId, string imageId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = SpanRetrieveFirmwareWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware Retrieve information on a firmware image
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> SpanRetrieveFirmwareWithHttpInfo(string collectionId, string imageId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanRetrieveFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanRetrieveFirmware");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanRetrieveFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware Retrieve information on a firmware image
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> SpanRetrieveFirmwareAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await SpanRetrieveFirmwareWithHttpInfoAsync(collectionId, imageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware Retrieve information on a firmware image
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> SpanRetrieveFirmwareWithHttpInfoAsync(string collectionId, string imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanRetrieveFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanRetrieveFirmware");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanRetrieveFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <returns>Firmware</returns>
        public Firmware SpanUpdateFirmware(string collectionId, string imageId, Firmware body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = SpanUpdateFirmwareWithHttpInfo(collectionId, imageId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> SpanUpdateFirmwareWithHttpInfo(string collectionId, string imageId, Firmware body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanUpdateFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanUpdateFirmware");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->SpanUpdateFirmware");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanUpdateFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> SpanUpdateFirmwareAsync(string collectionId, string imageId, Firmware body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await SpanUpdateFirmwareWithHttpInfoAsync(collectionId, imageId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Collection ID  Collection ID for the collection owning the firmware image.</param>
        /// <param name="imageId">Firmware image ID</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> SpanUpdateFirmwareWithHttpInfoAsync(string collectionId, string imageId, Firmware body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->SpanUpdateFirmware");

            // verify the required parameter 'imageId' is set
            if (imageId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->SpanUpdateFirmware");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->SpanUpdateFirmware");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Firmware>("/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanUpdateFirmware", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
