/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.5 contented-jamila
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.Span.Client;
using Com.Lab5e.Span.Model;

namespace Com.Lab5e.Span.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// BETA: Assign a target image
        /// </summary>
        /// <remarks>
        /// Assign a particular labeled image to a device or a collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssignTargetImageResponse</returns>
        AssignTargetImageResponse AssignTargetImage(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0);

        /// <summary>
        /// BETA: Assign a target image
        /// </summary>
        /// <remarks>
        /// Assign a particular labeled image to a device or a collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssignTargetImageResponse</returns>
        ApiResponse<AssignTargetImageResponse> AssignTargetImageWithHttpInfo(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClearFirmwareErrorResponse</returns>
        ClearFirmwareErrorResponse ClearFirmwareError(string collectionId, string deviceId, int operationIndex = 0);

        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClearFirmwareErrorResponse</returns>
        ApiResponse<ClearFirmwareErrorResponse> ClearFirmwareErrorWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0);
        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        Firmware CreateFirmware(string collectionId, CreateFirmwareBody body, int operationIndex = 0);

        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> CreateFirmwareWithHttpInfo(string collectionId, CreateFirmwareBody body, int operationIndex = 0);
        /// <summary>
        /// BETA: Create a labeled firmware image
        /// </summary>
        /// <remarks>
        /// Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateLabeledFirmwareResponse</returns>
        CreateLabeledFirmwareResponse CreateLabeledFirmware(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0);

        /// <summary>
        /// BETA: Create a labeled firmware image
        /// </summary>
        /// <remarks>
        /// Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateLabeledFirmwareResponse</returns>
        ApiResponse<CreateLabeledFirmwareResponse> CreateLabeledFirmwareWithHttpInfo(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        Firmware DeleteFirmware(string collectionId, string imageId, int operationIndex = 0);

        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> DeleteFirmwareWithHttpInfo(string collectionId, string imageId, int operationIndex = 0);
        /// <summary>
        /// BETA: Remove a tagged firmware image
        /// </summary>
        /// <remarks>
        /// Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteLabeledImage(string collectionId, string imageId, int operationIndex = 0);

        /// <summary>
        /// BETA: Remove a tagged firmware image
        /// </summary>
        /// <remarks>
        /// Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteLabeledImageWithHttpInfo(string collectionId, string imageId, int operationIndex = 0);
        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmwareUsageResponse</returns>
        FirmwareUsageResponse FirmwareUsage(string collectionId, string imageId, int operationIndex = 0);

        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmwareUsageResponse</returns>
        ApiResponse<FirmwareUsageResponse> FirmwareUsageWithHttpInfo(string collectionId, string imageId, int operationIndex = 0);
        /// <summary>
        /// BETA: Get state for a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetImageStateResponse</returns>
        GetImageStateResponse GetImageState(string collectionId, string deviceId, int operationIndex = 0);

        /// <summary>
        /// BETA: Get state for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetImageStateResponse</returns>
        ApiResponse<GetImageStateResponse> GetImageStateWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0);
        /// <summary>
        /// List firmware
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFirmwareResponse</returns>
        ListFirmwareResponse ListFirmware(string collectionId, int operationIndex = 0);

        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFirmwareResponse</returns>
        ApiResponse<ListFirmwareResponse> ListFirmwareWithHttpInfo(string collectionId, int operationIndex = 0);
        /// <summary>
        /// BETA: List image assignments plus states
        /// </summary>
        /// <remarks>
        /// List the status for the labeled firmware images in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImageStatesResponse</returns>
        ListImageStatesResponse ListImageStates(string collectionId, int operationIndex = 0);

        /// <summary>
        /// BETA: List image assignments plus states
        /// </summary>
        /// <remarks>
        /// List the status for the labeled firmware images in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImageStatesResponse</returns>
        ApiResponse<ListImageStatesResponse> ListImageStatesWithHttpInfo(string collectionId, int operationIndex = 0);
        /// <summary>
        /// BETA: List version history for a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImageVersionHistoryResponse</returns>
        ListImageVersionHistoryResponse ListImageVersionHistory(string collectionId, string deviceId, int operationIndex = 0);

        /// <summary>
        /// BETA: List version history for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImageVersionHistoryResponse</returns>
        ApiResponse<ListImageVersionHistoryResponse> ListImageVersionHistoryWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0);
        /// <summary>
        /// BETA: List the labeled firmware images for a collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLabeledFirmwareResponse</returns>
        ListLabeledFirmwareResponse ListLabeledFirmware(string collectionId, int operationIndex = 0);

        /// <summary>
        /// BETA: List the labeled firmware images for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLabeledFirmwareResponse</returns>
        ApiResponse<ListLabeledFirmwareResponse> ListLabeledFirmwareWithHttpInfo(string collectionId, int operationIndex = 0);
        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        Firmware RetrieveFirmware(string collectionId, string imageId, int operationIndex = 0);

        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> RetrieveFirmwareWithHttpInfo(string collectionId, string imageId, int operationIndex = 0);
        /// <summary>
        /// Retrieve firmware statistics
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmwareStats</returns>
        FirmwareStats RetrieveFirmwareStats(string collectionId, string imageId, int operationIndex = 0);

        /// <summary>
        /// Retrieve firmware statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmwareStats</returns>
        ApiResponse<FirmwareStats> RetrieveFirmwareStatsWithHttpInfo(string collectionId, string imageId, int operationIndex = 0);
        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// Only the version and tags fields can be updated. The other fields will be ignored.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        Firmware UpdateFirmware(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0);

        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// Only the version and tags fields can be updated. The other fields will be ignored.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        ApiResponse<Firmware> UpdateFirmwareWithHttpInfo(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// BETA: Assign a target image
        /// </summary>
        /// <remarks>
        /// Assign a particular labeled image to a device or a collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssignTargetImageResponse</returns>
        System.Threading.Tasks.Task<AssignTargetImageResponse> AssignTargetImageAsync(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: Assign a target image
        /// </summary>
        /// <remarks>
        /// Assign a particular labeled image to a device or a collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssignTargetImageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssignTargetImageResponse>> AssignTargetImageWithHttpInfoAsync(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClearFirmwareErrorResponse</returns>
        System.Threading.Tasks.Task<ClearFirmwareErrorResponse> ClearFirmwareErrorAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear FOTA error
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClearFirmwareErrorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClearFirmwareErrorResponse>> ClearFirmwareErrorWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> CreateFirmwareAsync(string collectionId, CreateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create firmware
        /// </summary>
        /// <remarks>
        /// Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> CreateFirmwareWithHttpInfoAsync(string collectionId, CreateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: Create a labeled firmware image
        /// </summary>
        /// <remarks>
        /// Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLabeledFirmwareResponse</returns>
        System.Threading.Tasks.Task<CreateLabeledFirmwareResponse> CreateLabeledFirmwareAsync(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: Create a labeled firmware image
        /// </summary>
        /// <remarks>
        /// Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLabeledFirmwareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLabeledFirmwareResponse>> CreateLabeledFirmwareWithHttpInfoAsync(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> DeleteFirmwareAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> DeleteFirmwareWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: Remove a tagged firmware image
        /// </summary>
        /// <remarks>
        /// Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteLabeledImageAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: Remove a tagged firmware image
        /// </summary>
        /// <remarks>
        /// Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLabeledImageWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareUsageResponse</returns>
        System.Threading.Tasks.Task<FirmwareUsageResponse> FirmwareUsageAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Firmware usage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareUsageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmwareUsageResponse>> FirmwareUsageWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: Get state for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetImageStateResponse</returns>
        System.Threading.Tasks.Task<GetImageStateResponse> GetImageStateAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: Get state for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetImageStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetImageStateResponse>> GetImageStateWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFirmwareResponse</returns>
        System.Threading.Tasks.Task<ListFirmwareResponse> ListFirmwareAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFirmwareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFirmwareResponse>> ListFirmwareWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: List image assignments plus states
        /// </summary>
        /// <remarks>
        /// List the status for the labeled firmware images in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImageStatesResponse</returns>
        System.Threading.Tasks.Task<ListImageStatesResponse> ListImageStatesAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: List image assignments plus states
        /// </summary>
        /// <remarks>
        /// List the status for the labeled firmware images in the collection
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImageStatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListImageStatesResponse>> ListImageStatesWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: List version history for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImageVersionHistoryResponse</returns>
        System.Threading.Tasks.Task<ListImageVersionHistoryResponse> ListImageVersionHistoryAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: List version history for a single device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImageVersionHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListImageVersionHistoryResponse>> ListImageVersionHistoryWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// BETA: List the labeled firmware images for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLabeledFirmwareResponse</returns>
        System.Threading.Tasks.Task<ListLabeledFirmwareResponse> ListLabeledFirmwareAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// BETA: List the labeled firmware images for a collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLabeledFirmwareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLabeledFirmwareResponse>> ListLabeledFirmwareWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> RetrieveFirmwareAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve firmware
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> RetrieveFirmwareWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve firmware statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareStats</returns>
        System.Threading.Tasks.Task<FirmwareStats> RetrieveFirmwareStatsAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve firmware statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirmwareStats>> RetrieveFirmwareStatsWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// Only the version and tags fields can be updated. The other fields will be ignored.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        System.Threading.Tasks.Task<Firmware> UpdateFirmwareAsync(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update firmware
        /// </summary>
        /// <remarks>
        /// Only the version and tags fields can be updated. The other fields will be ignored.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        System.Threading.Tasks.Task<ApiResponse<Firmware>> UpdateFirmwareWithHttpInfoAsync(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFotaApi : IFotaApiSync, IFotaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FotaApi : IFotaApi
    {
        private Com.Lab5e.Span.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FotaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FotaApi(string basePath)
        {
            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.Span.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FotaApi(Com.Lab5e.Span.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FotaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FotaApi(Com.Lab5e.Span.Client.ISynchronousClient client, Com.Lab5e.Span.Client.IAsynchronousClient asyncClient, Com.Lab5e.Span.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.Span.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.Span.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// BETA: Assign a target image Assign a particular labeled image to a device or a collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssignTargetImageResponse</returns>
        public AssignTargetImageResponse AssignTargetImage(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<AssignTargetImageResponse> localVarResponse = AssignTargetImageWithHttpInfo(collectionId, imageId, label, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Assign a target image Assign a particular labeled image to a device or a collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssignTargetImageResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<AssignTargetImageResponse> AssignTargetImageWithHttpInfo(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->AssignTargetImage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->AssignTargetImage");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (deviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "deviceId", deviceId));
            }

            localVarRequestOptions.Operation = "FotaApi.AssignTargetImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AssignTargetImageResponse>("/span/collections/{collectionId}/firmware/labeled/{imageId}/assign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignTargetImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Assign a target image Assign a particular labeled image to a device or a collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssignTargetImageResponse</returns>
        public async System.Threading.Tasks.Task<AssignTargetImageResponse> AssignTargetImageAsync(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<AssignTargetImageResponse> localVarResponse = await AssignTargetImageWithHttpInfoAsync(collectionId, imageId, label, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Assign a target image Assign a particular labeled image to a device or a collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="label"> (optional)</param>
        /// <param name="deviceId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssignTargetImageResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<AssignTargetImageResponse>> AssignTargetImageWithHttpInfoAsync(string collectionId, string imageId, string? label = default(string?), string? deviceId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->AssignTargetImage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->AssignTargetImage");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (deviceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "deviceId", deviceId));
            }

            localVarRequestOptions.Operation = "FotaApi.AssignTargetImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AssignTargetImageResponse>("/span/collections/{collectionId}/firmware/labeled/{imageId}/assign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignTargetImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClearFirmwareErrorResponse</returns>
        public ClearFirmwareErrorResponse ClearFirmwareError(string collectionId, string deviceId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ClearFirmwareErrorResponse> localVarResponse = ClearFirmwareErrorWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClearFirmwareErrorResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ClearFirmwareErrorResponse> ClearFirmwareErrorWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ClearFirmwareError");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->ClearFirmwareError");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ClearFirmwareError";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ClearFirmwareErrorResponse>("/span/collections/{collectionId}/devices/{deviceId}/fwerror", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearFirmwareError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClearFirmwareErrorResponse</returns>
        public async System.Threading.Tasks.Task<ClearFirmwareErrorResponse> ClearFirmwareErrorAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ClearFirmwareErrorResponse> localVarResponse = await ClearFirmwareErrorWithHttpInfoAsync(collectionId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear FOTA error 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClearFirmwareErrorResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ClearFirmwareErrorResponse>> ClearFirmwareErrorWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ClearFirmwareError");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->ClearFirmwareError");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ClearFirmwareError";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ClearFirmwareErrorResponse>("/span/collections/{collectionId}/devices/{deviceId}/fwerror", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearFirmwareError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create firmware Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        public Firmware CreateFirmware(string collectionId, CreateFirmwareBody body, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = CreateFirmwareWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create firmware Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> CreateFirmwareWithHttpInfo(string collectionId, CreateFirmwareBody body, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->CreateFirmware");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->CreateFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FotaApi.CreateFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Firmware>("/span/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create firmware Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> CreateFirmwareAsync(string collectionId, CreateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await CreateFirmwareWithHttpInfoAsync(collectionId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create firmware Firmware images must have unique version numbers and have an unique checksum. The checksum is calculated when the firmware image is uploaded.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> CreateFirmwareWithHttpInfoAsync(string collectionId, CreateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->CreateFirmware");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->CreateFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FotaApi.CreateFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Firmware>("/span/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Create a labeled firmware image Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateLabeledFirmwareResponse</returns>
        public CreateLabeledFirmwareResponse CreateLabeledFirmware(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<CreateLabeledFirmwareResponse> localVarResponse = CreateLabeledFirmwareWithHttpInfo(collectionId, version, label, imageRef);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Create a labeled firmware image Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateLabeledFirmwareResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<CreateLabeledFirmwareResponse> CreateLabeledFirmwareWithHttpInfo(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->CreateLabeledFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (imageRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "imageRef", imageRef));
            }

            localVarRequestOptions.Operation = "FotaApi.CreateLabeledFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateLabeledFirmwareResponse>("/span/collections/{collectionId}/firmware/labeled", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLabeledFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Create a labeled firmware image Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateLabeledFirmwareResponse</returns>
        public async System.Threading.Tasks.Task<CreateLabeledFirmwareResponse> CreateLabeledFirmwareAsync(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<CreateLabeledFirmwareResponse> localVarResponse = await CreateLabeledFirmwareWithHttpInfoAsync(collectionId, version, label, imageRef, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Create a labeled firmware image Devices might need several different firmware images, depending on their configuration. Low-power devices usually have just a single firmware image but more complex devices might need several firmware images for their  subsystems. The firmware image must be uploaded prior to the call and the  returned data structure is included in the request.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="version"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="imageRef"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateLabeledFirmwareResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<CreateLabeledFirmwareResponse>> CreateLabeledFirmwareWithHttpInfoAsync(string collectionId, string? version = default(string?), string? label = default(string?), string? imageRef = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->CreateLabeledFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (label != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "label", label));
            }
            if (imageRef != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "imageRef", imageRef));
            }

            localVarRequestOptions.Operation = "FotaApi.CreateLabeledFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateLabeledFirmwareResponse>("/span/collections/{collectionId}/firmware/labeled", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLabeledFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        public Firmware DeleteFirmware(string collectionId, string imageId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = DeleteFirmwareWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> DeleteFirmwareWithHttpInfo(string collectionId, string imageId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->DeleteFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->DeleteFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.DeleteFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Firmware>("/span/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> DeleteFirmwareAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await DeleteFirmwareWithHttpInfoAsync(collectionId, imageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> DeleteFirmwareWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->DeleteFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->DeleteFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.DeleteFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Firmware>("/span/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Remove a tagged firmware image Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteLabeledImage(string collectionId, string imageId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = DeleteLabeledImageWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Remove a tagged firmware image Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Object> DeleteLabeledImageWithHttpInfo(string collectionId, string imageId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->DeleteLabeledImage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->DeleteLabeledImage");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.DeleteLabeledImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/span/collections/{collectionId}/firmware/labeled/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLabeledImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Remove a tagged firmware image Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteLabeledImageAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = await DeleteLabeledImageWithHttpInfoAsync(collectionId, imageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Remove a tagged firmware image Remove a tagged firmware image from the backing store and it&#39;s metadata
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Object>> DeleteLabeledImageWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->DeleteLabeledImage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->DeleteLabeledImage");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.DeleteLabeledImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/span/collections/{collectionId}/firmware/labeled/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLabeledImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Firmware usage 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmwareUsageResponse</returns>
        public FirmwareUsageResponse FirmwareUsage(string collectionId, string imageId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> localVarResponse = FirmwareUsageWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Firmware usage 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmwareUsageResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> FirmwareUsageWithHttpInfo(string collectionId, string imageId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->FirmwareUsage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->FirmwareUsage");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.FirmwareUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirmwareUsageResponse>("/span/collections/{collectionId}/firmware/{imageId}/usage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FirmwareUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Firmware usage 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareUsageResponse</returns>
        public async System.Threading.Tasks.Task<FirmwareUsageResponse> FirmwareUsageAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse> localVarResponse = await FirmwareUsageWithHttpInfoAsync(collectionId, imageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Firmware usage 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareUsageResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<FirmwareUsageResponse>> FirmwareUsageWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->FirmwareUsage");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->FirmwareUsage");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.FirmwareUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirmwareUsageResponse>("/span/collections/{collectionId}/firmware/{imageId}/usage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FirmwareUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Get state for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetImageStateResponse</returns>
        public GetImageStateResponse GetImageState(string collectionId, string deviceId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<GetImageStateResponse> localVarResponse = GetImageStateWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Get state for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetImageStateResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<GetImageStateResponse> GetImageStateWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->GetImageState");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->GetImageState");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.GetImageState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GetImageStateResponse>("/span/collections/{collectionId}/devices/{deviceId}/fotastate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: Get state for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetImageStateResponse</returns>
        public async System.Threading.Tasks.Task<GetImageStateResponse> GetImageStateAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<GetImageStateResponse> localVarResponse = await GetImageStateWithHttpInfoAsync(collectionId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: Get state for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetImageStateResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<GetImageStateResponse>> GetImageStateWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->GetImageState");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->GetImageState");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.GetImageState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<GetImageStateResponse>("/span/collections/{collectionId}/devices/{deviceId}/fotastate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetImageState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFirmwareResponse</returns>
        public ListFirmwareResponse ListFirmware(string collectionId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> localVarResponse = ListFirmwareWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFirmwareResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> ListFirmwareWithHttpInfo(string collectionId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFirmwareResponse>("/span/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFirmwareResponse</returns>
        public async System.Threading.Tasks.Task<ListFirmwareResponse> ListFirmwareAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse> localVarResponse = await ListFirmwareWithHttpInfoAsync(collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFirmwareResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListFirmwareResponse>> ListFirmwareWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFirmwareResponse>("/span/collections/{collectionId}/firmware", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List image assignments plus states List the status for the labeled firmware images in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImageStatesResponse</returns>
        public ListImageStatesResponse ListImageStates(string collectionId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListImageStatesResponse> localVarResponse = ListImageStatesWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List image assignments plus states List the status for the labeled firmware images in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImageStatesResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListImageStatesResponse> ListImageStatesWithHttpInfo(string collectionId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListImageStates");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListImageStates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListImageStatesResponse>("/span/collections/{collectionId}/firmware/labeled/states", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImageStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List image assignments plus states List the status for the labeled firmware images in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImageStatesResponse</returns>
        public async System.Threading.Tasks.Task<ListImageStatesResponse> ListImageStatesAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListImageStatesResponse> localVarResponse = await ListImageStatesWithHttpInfoAsync(collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List image assignments plus states List the status for the labeled firmware images in the collection
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImageStatesResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListImageStatesResponse>> ListImageStatesWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListImageStates");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListImageStates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListImageStatesResponse>("/span/collections/{collectionId}/firmware/labeled/states", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImageStates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List version history for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListImageVersionHistoryResponse</returns>
        public ListImageVersionHistoryResponse ListImageVersionHistory(string collectionId, string deviceId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListImageVersionHistoryResponse> localVarResponse = ListImageVersionHistoryWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List version history for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListImageVersionHistoryResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListImageVersionHistoryResponse> ListImageVersionHistoryWithHttpInfo(string collectionId, string deviceId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListImageVersionHistory");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->ListImageVersionHistory");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListImageVersionHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ListImageVersionHistoryResponse>("/span/collections/{collectionId}/devices/{deviceId}/fotalog", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImageVersionHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List version history for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListImageVersionHistoryResponse</returns>
        public async System.Threading.Tasks.Task<ListImageVersionHistoryResponse> ListImageVersionHistoryAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListImageVersionHistoryResponse> localVarResponse = await ListImageVersionHistoryWithHttpInfoAsync(collectionId, deviceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List version history for a single device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListImageVersionHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListImageVersionHistoryResponse>> ListImageVersionHistoryWithHttpInfoAsync(string collectionId, string deviceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListImageVersionHistory");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling FotaApi->ListImageVersionHistory");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListImageVersionHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ListImageVersionHistoryResponse>("/span/collections/{collectionId}/devices/{deviceId}/fotalog", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListImageVersionHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List the labeled firmware images for a collection 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLabeledFirmwareResponse</returns>
        public ListLabeledFirmwareResponse ListLabeledFirmware(string collectionId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListLabeledFirmwareResponse> localVarResponse = ListLabeledFirmwareWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List the labeled firmware images for a collection 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLabeledFirmwareResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListLabeledFirmwareResponse> ListLabeledFirmwareWithHttpInfo(string collectionId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListLabeledFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListLabeledFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLabeledFirmwareResponse>("/span/collections/{collectionId}/firmware/labeled", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLabeledFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// BETA: List the labeled firmware images for a collection 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLabeledFirmwareResponse</returns>
        public async System.Threading.Tasks.Task<ListLabeledFirmwareResponse> ListLabeledFirmwareAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListLabeledFirmwareResponse> localVarResponse = await ListLabeledFirmwareWithHttpInfoAsync(collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// BETA: List the labeled firmware images for a collection 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLabeledFirmwareResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListLabeledFirmwareResponse>> ListLabeledFirmwareWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->ListLabeledFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.ListLabeledFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLabeledFirmwareResponse>("/span/collections/{collectionId}/firmware/labeled", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLabeledFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        public Firmware RetrieveFirmware(string collectionId, string imageId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = RetrieveFirmwareWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> RetrieveFirmwareWithHttpInfo(string collectionId, string imageId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->RetrieveFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->RetrieveFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.RetrieveFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Firmware>("/span/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> RetrieveFirmwareAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await RetrieveFirmwareWithHttpInfoAsync(collectionId, imageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> RetrieveFirmwareWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->RetrieveFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->RetrieveFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.RetrieveFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Firmware>("/span/collections/{collectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware statistics 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FirmwareStats</returns>
        public FirmwareStats RetrieveFirmwareStats(string collectionId, string imageId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareStats> localVarResponse = RetrieveFirmwareStatsWithHttpInfo(collectionId, imageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware statistics 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FirmwareStats</returns>
        public Com.Lab5e.Span.Client.ApiResponse<FirmwareStats> RetrieveFirmwareStatsWithHttpInfo(string collectionId, string imageId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->RetrieveFirmwareStats");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->RetrieveFirmwareStats");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.RetrieveFirmwareStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FirmwareStats>("/span/collections/{collectionId}/firmware/{imageId}/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFirmwareStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve firmware statistics 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FirmwareStats</returns>
        public async System.Threading.Tasks.Task<FirmwareStats> RetrieveFirmwareStatsAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<FirmwareStats> localVarResponse = await RetrieveFirmwareStatsWithHttpInfoAsync(collectionId, imageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve firmware statistics 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FirmwareStats)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<FirmwareStats>> RetrieveFirmwareStatsWithHttpInfoAsync(string collectionId, string imageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling FotaApi->RetrieveFirmwareStats");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->RetrieveFirmwareStats");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter

            localVarRequestOptions.Operation = "FotaApi.RetrieveFirmwareStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FirmwareStats>("/span/collections/{collectionId}/firmware/{imageId}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveFirmwareStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update firmware Only the version and tags fields can be updated. The other fields will be ignored.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Firmware</returns>
        public Firmware UpdateFirmware(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = UpdateFirmwareWithHttpInfo(existingCollectionId, imageId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update firmware Only the version and tags fields can be updated. The other fields will be ignored.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Firmware</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Firmware> UpdateFirmwareWithHttpInfo(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling FotaApi->UpdateFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->UpdateFirmware");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->UpdateFirmware");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FotaApi.UpdateFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Firmware>("/span/collections/{existingCollectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update firmware Only the version and tags fields can be updated. The other fields will be ignored.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Firmware</returns>
        public async System.Threading.Tasks.Task<Firmware> UpdateFirmwareAsync(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Firmware> localVarResponse = await UpdateFirmwareWithHttpInfoAsync(existingCollectionId, imageId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update firmware Only the version and tags fields can be updated. The other fields will be ignored.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="imageId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Firmware)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Firmware>> UpdateFirmwareWithHttpInfoAsync(string existingCollectionId, string imageId, UpdateFirmwareBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling FotaApi->UpdateFirmware");
            }

            // verify the required parameter 'imageId' is set
            if (imageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'imageId' when calling FotaApi->UpdateFirmware");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling FotaApi->UpdateFirmware");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("imageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(imageId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "FotaApi.UpdateFirmware";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Firmware>("/span/collections/{existingCollectionId}/firmware/{imageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFirmware", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
