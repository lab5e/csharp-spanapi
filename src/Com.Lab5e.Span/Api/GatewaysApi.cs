/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.0 convulsive-launa
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.Span.Client;
using Com.Lab5e.Span.Model;

namespace Com.Lab5e.Span.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGatewaysApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create gateway
        /// </summary>
        /// <remarks>
        /// Create a new gateway.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        Gateway CreateGateway(string collectionId, CreateGatewayBody body, int operationIndex = 0);

        /// <summary>
        /// Create gateway
        /// </summary>
        /// <remarks>
        /// Create a new gateway.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        ApiResponse<Gateway> CreateGatewayWithHttpInfo(string collectionId, CreateGatewayBody body, int operationIndex = 0);
        /// <summary>
        /// Delete gateway
        /// </summary>
        /// <remarks>
        /// Remove a gateway from Span.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        Gateway DeleteGateway(string collectionId, string gatewayId, int operationIndex = 0);

        /// <summary>
        /// Delete gateway
        /// </summary>
        /// <remarks>
        /// Remove a gateway from Span.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        ApiResponse<Gateway> DeleteGatewayWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0);
        /// <summary>
        /// Get issued certificate(s) for gateway
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GatewayCertificateResponse</returns>
        GatewayCertificateResponse GatewayCertificates(string collectionId, string gatewayId, int operationIndex = 0);

        /// <summary>
        /// Get issued certificate(s) for gateway
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GatewayCertificateResponse</returns>
        ApiResponse<GatewayCertificateResponse> GatewayCertificatesWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0);
        /// <summary>
        /// List gateways
        /// </summary>
        /// <remarks>
        /// List the user&#39;s gatways, including built-in gateways.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListGatewayResponse</returns>
        ListGatewayResponse ListGateways(string collectionId, int operationIndex = 0);

        /// <summary>
        /// List gateways
        /// </summary>
        /// <remarks>
        /// List the user&#39;s gatways, including built-in gateways.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListGatewayResponse</returns>
        ApiResponse<ListGatewayResponse> ListGatewaysWithHttpInfo(string collectionId, int operationIndex = 0);
        /// <summary>
        /// Retrieve gateway
        /// </summary>
        /// <remarks>
        /// Get gateway information
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        Gateway RetrieveGateway(string collectionId, string gatewayId, int operationIndex = 0);

        /// <summary>
        /// Retrieve gateway
        /// </summary>
        /// <remarks>
        /// Get gateway information
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        ApiResponse<Gateway> RetrieveGatewayWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0);
        /// <summary>
        /// Retrieve gateway statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for gateway
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GatewayStats</returns>
        GatewayStats RetrieveGatewayStats(string collectionId, string gatewayId, int operationIndex = 0);

        /// <summary>
        /// Retrieve gateway statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for gateway
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GatewayStats</returns>
        ApiResponse<GatewayStats> RetrieveGatewayStatsWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0);
        /// <summary>
        /// Update gateway
        /// </summary>
        /// <remarks>
        /// Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        Gateway UpdateGateway(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0);

        /// <summary>
        /// Update gateway
        /// </summary>
        /// <remarks>
        /// Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        ApiResponse<Gateway> UpdateGatewayWithHttpInfo(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGatewaysApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create gateway
        /// </summary>
        /// <remarks>
        /// Create a new gateway.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        System.Threading.Tasks.Task<Gateway> CreateGatewayAsync(string collectionId, CreateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create gateway
        /// </summary>
        /// <remarks>
        /// Create a new gateway.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gateway>> CreateGatewayWithHttpInfoAsync(string collectionId, CreateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete gateway
        /// </summary>
        /// <remarks>
        /// Remove a gateway from Span.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        System.Threading.Tasks.Task<Gateway> DeleteGatewayAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete gateway
        /// </summary>
        /// <remarks>
        /// Remove a gateway from Span.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gateway>> DeleteGatewayWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get issued certificate(s) for gateway
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCertificateResponse</returns>
        System.Threading.Tasks.Task<GatewayCertificateResponse> GatewayCertificatesAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get issued certificate(s) for gateway
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayCertificateResponse>> GatewayCertificatesWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List gateways
        /// </summary>
        /// <remarks>
        /// List the user&#39;s gatways, including built-in gateways.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListGatewayResponse</returns>
        System.Threading.Tasks.Task<ListGatewayResponse> ListGatewaysAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List gateways
        /// </summary>
        /// <remarks>
        /// List the user&#39;s gatways, including built-in gateways.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListGatewayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListGatewayResponse>> ListGatewaysWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve gateway
        /// </summary>
        /// <remarks>
        /// Get gateway information
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        System.Threading.Tasks.Task<Gateway> RetrieveGatewayAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve gateway
        /// </summary>
        /// <remarks>
        /// Get gateway information
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gateway>> RetrieveGatewayWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve gateway statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for gateway
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStats</returns>
        System.Threading.Tasks.Task<GatewayStats> RetrieveGatewayStatsAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve gateway statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for gateway
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<GatewayStats>> RetrieveGatewayStatsWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update gateway
        /// </summary>
        /// <remarks>
        /// Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        System.Threading.Tasks.Task<Gateway> UpdateGatewayAsync(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update gateway
        /// </summary>
        /// <remarks>
        /// Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gateway>> UpdateGatewayWithHttpInfoAsync(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGatewaysApi : IGatewaysApiSync, IGatewaysApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GatewaysApi : IGatewaysApi
    {
        private Com.Lab5e.Span.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GatewaysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GatewaysApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GatewaysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GatewaysApi(string basePath)
        {
            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.Span.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GatewaysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GatewaysApi(Com.Lab5e.Span.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GatewaysApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GatewaysApi(Com.Lab5e.Span.Client.ISynchronousClient client, Com.Lab5e.Span.Client.IAsynchronousClient asyncClient, Com.Lab5e.Span.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.Span.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.Span.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create gateway Create a new gateway.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        public Gateway CreateGateway(string collectionId, CreateGatewayBody body, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = CreateGatewayWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create gateway Create a new gateway.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Gateway> CreateGatewayWithHttpInfo(string collectionId, CreateGatewayBody body, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->CreateGateway");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling GatewaysApi->CreateGateway");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GatewaysApi.CreateGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Gateway>("/span/collections/{collectionId}/gateways", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create gateway Create a new gateway.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        public async System.Threading.Tasks.Task<Gateway> CreateGatewayAsync(string collectionId, CreateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = await CreateGatewayWithHttpInfoAsync(collectionId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create gateway Create a new gateway.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Gateway>> CreateGatewayWithHttpInfoAsync(string collectionId, CreateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->CreateGateway");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling GatewaysApi->CreateGateway");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GatewaysApi.CreateGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Gateway>("/span/collections/{collectionId}/gateways", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete gateway Remove a gateway from Span.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        public Gateway DeleteGateway(string collectionId, string gatewayId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = DeleteGatewayWithHttpInfo(collectionId, gatewayId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete gateway Remove a gateway from Span.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Gateway> DeleteGatewayWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->DeleteGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->DeleteGateway");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.DeleteGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Gateway>("/span/collections/{collectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete gateway Remove a gateway from Span.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        public async System.Threading.Tasks.Task<Gateway> DeleteGatewayAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = await DeleteGatewayWithHttpInfoAsync(collectionId, gatewayId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete gateway Remove a gateway from Span.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Gateway>> DeleteGatewayWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->DeleteGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->DeleteGateway");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.DeleteGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Gateway>("/span/collections/{collectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued certificate(s) for gateway 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GatewayCertificateResponse</returns>
        public GatewayCertificateResponse GatewayCertificates(string collectionId, string gatewayId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<GatewayCertificateResponse> localVarResponse = GatewayCertificatesWithHttpInfo(collectionId, gatewayId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued certificate(s) for gateway 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GatewayCertificateResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<GatewayCertificateResponse> GatewayCertificatesWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->GatewayCertificates");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->GatewayCertificates");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.GatewayCertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GatewayCertificateResponse>("/span/collections/{collectionId}/gateways/{gatewayId}/certs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued certificate(s) for gateway 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayCertificateResponse</returns>
        public async System.Threading.Tasks.Task<GatewayCertificateResponse> GatewayCertificatesAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<GatewayCertificateResponse> localVarResponse = await GatewayCertificatesWithHttpInfoAsync(collectionId, gatewayId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued certificate(s) for gateway 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<GatewayCertificateResponse>> GatewayCertificatesWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->GatewayCertificates");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->GatewayCertificates");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.GatewayCertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GatewayCertificateResponse>("/span/collections/{collectionId}/gateways/{gatewayId}/certs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GatewayCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List gateways List the user&#39;s gatways, including built-in gateways.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListGatewayResponse</returns>
        public ListGatewayResponse ListGateways(string collectionId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListGatewayResponse> localVarResponse = ListGatewaysWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List gateways List the user&#39;s gatways, including built-in gateways.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListGatewayResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListGatewayResponse> ListGatewaysWithHttpInfo(string collectionId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->ListGateways");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.ListGateways";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListGatewayResponse>("/span/collections/{collectionId}/gateways", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGateways", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List gateways List the user&#39;s gatways, including built-in gateways.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListGatewayResponse</returns>
        public async System.Threading.Tasks.Task<ListGatewayResponse> ListGatewaysAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListGatewayResponse> localVarResponse = await ListGatewaysWithHttpInfoAsync(collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List gateways List the user&#39;s gatways, including built-in gateways.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListGatewayResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListGatewayResponse>> ListGatewaysWithHttpInfoAsync(string collectionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->ListGateways");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.ListGateways";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListGatewayResponse>("/span/collections/{collectionId}/gateways", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListGateways", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve gateway Get gateway information
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        public Gateway RetrieveGateway(string collectionId, string gatewayId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = RetrieveGatewayWithHttpInfo(collectionId, gatewayId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gateway Get gateway information
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Gateway> RetrieveGatewayWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->RetrieveGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->RetrieveGateway");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.RetrieveGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Gateway>("/span/collections/{collectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve gateway Get gateway information
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        public async System.Threading.Tasks.Task<Gateway> RetrieveGatewayAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = await RetrieveGatewayWithHttpInfoAsync(collectionId, gatewayId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gateway Get gateway information
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Gateway>> RetrieveGatewayWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->RetrieveGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->RetrieveGateway");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.RetrieveGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Gateway>("/span/collections/{collectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve gateway statistics Get statistics for gateway
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GatewayStats</returns>
        public GatewayStats RetrieveGatewayStats(string collectionId, string gatewayId, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<GatewayStats> localVarResponse = RetrieveGatewayStatsWithHttpInfo(collectionId, gatewayId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gateway statistics Get statistics for gateway
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GatewayStats</returns>
        public Com.Lab5e.Span.Client.ApiResponse<GatewayStats> RetrieveGatewayStatsWithHttpInfo(string collectionId, string gatewayId, int operationIndex = 0)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->RetrieveGatewayStats");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->RetrieveGatewayStats");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.RetrieveGatewayStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GatewayStats>("/span/collections/{collectionId}/gateways/{gatewayId}/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGatewayStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve gateway statistics Get statistics for gateway
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GatewayStats</returns>
        public async System.Threading.Tasks.Task<GatewayStats> RetrieveGatewayStatsAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<GatewayStats> localVarResponse = await RetrieveGatewayStatsWithHttpInfoAsync(collectionId, gatewayId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve gateway statistics Get statistics for gateway
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GatewayStats)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<GatewayStats>> RetrieveGatewayStatsWithHttpInfoAsync(string collectionId, string gatewayId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling GatewaysApi->RetrieveGatewayStats");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->RetrieveGatewayStats");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter

            localVarRequestOptions.Operation = "GatewaysApi.RetrieveGatewayStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GatewayStats>("/span/collections/{collectionId}/gateways/{gatewayId}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveGatewayStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update gateway Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Gateway</returns>
        public Gateway UpdateGateway(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0)
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = UpdateGatewayWithHttpInfo(existingCollectionId, gatewayId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update gateway Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Gateway</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Gateway> UpdateGatewayWithHttpInfo(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling GatewaysApi->UpdateGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->UpdateGateway");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling GatewaysApi->UpdateGateway");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GatewaysApi.UpdateGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Gateway>("/span/collections/{existingCollectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update gateway Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gateway</returns>
        public async System.Threading.Tasks.Task<Gateway> UpdateGatewayAsync(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Gateway> localVarResponse = await UpdateGatewayWithHttpInfoAsync(existingCollectionId, gatewayId, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update gateway Update configuration for a gateway. If you want to remove or move a gateway from the collection the devices in the collection must not have any gateway configuration. The certificates for the gateway are unchanged when the gateway is moved.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="gatewayId"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gateway)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Gateway>> UpdateGatewayWithHttpInfoAsync(string existingCollectionId, string gatewayId, UpdateGatewayBody body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling GatewaysApi->UpdateGateway");
            }

            // verify the required parameter 'gatewayId' is set
            if (gatewayId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'gatewayId' when calling GatewaysApi->UpdateGateway");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling GatewaysApi->UpdateGateway");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("gatewayId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(gatewayId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "GatewaysApi.UpdateGateway";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Gateway>("/span/collections/{existingCollectionId}/gateways/{gatewayId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGateway", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
