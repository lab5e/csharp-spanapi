/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.1.7 only-deshaun
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.Span.Client;
using Com.Lab5e.Span.Model;

namespace Com.Lab5e.Span.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device SpanCreateDevice(string collectionId, Device body);

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> SpanCreateDeviceWithHttpInfo(string collectionId, Device body);
        /// <summary>
        /// Remove device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        Device SpanDeleteDevice(string collectionId, string deviceId);

        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> SpanDeleteDeviceWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDataResponse</returns>
        ListDataResponse SpanListDeviceData(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));

        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        ApiResponse<ListDataResponse> SpanListDeviceDataWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));
        /// <summary>
        /// List devices
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        ListDevicesResponse SpanListDevices(string collectionId);

        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        ApiResponse<ListDevicesResponse> SpanListDevicesWithHttpInfo(string collectionId);
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        Device SpanRetrieveDevice(string collectionId, string deviceId);

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> SpanRetrieveDeviceWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SpanSendMessage(string collectionId, string deviceId, SendMessageRequest body);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SpanSendMessageWithHttpInfo(string collectionId, string deviceId, SendMessageRequest body);
        /// <summary>
        /// Update device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device SpanUpdateDevice(string existingCollectionId, string deviceId, UpdateDeviceRequest body);

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> SpanUpdateDeviceWithHttpInfo(string existingCollectionId, string deviceId, UpdateDeviceRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> SpanCreateDeviceAsync(string collectionId, Device body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> SpanCreateDeviceWithHttpInfoAsync(string collectionId, Device body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> SpanDeleteDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> SpanDeleteDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDataResponse</returns>
        System.Threading.Tasks.Task<ListDataResponse> SpanListDeviceDataAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDataResponse>> SpanListDeviceDataWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        System.Threading.Tasks.Task<ListDevicesResponse> SpanListDevicesAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDevicesResponse>> SpanListDevicesWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> SpanRetrieveDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> SpanRetrieveDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SpanSendMessageAsync(string collectionId, string deviceId, SendMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SpanSendMessageWithHttpInfoAsync(string collectionId, string deviceId, SendMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> SpanUpdateDeviceAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> SpanUpdateDeviceWithHttpInfoAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IDevicesApiSync, IDevicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private Com.Lab5e.Span.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(String basePath)
        {
            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.Span.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(Com.Lab5e.Span.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DevicesApi(Com.Lab5e.Span.Client.ISynchronousClient client, Com.Lab5e.Span.Client.IAsynchronousClient asyncClient, Com.Lab5e.Span.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.Span.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.Span.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device SpanCreateDevice(string collectionId, Device body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = SpanCreateDeviceWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> SpanCreateDeviceWithHttpInfo(string collectionId, Device body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanCreateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanCreateDevice");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Device>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanCreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> SpanCreateDeviceAsync(string collectionId, Device body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await SpanCreateDeviceWithHttpInfoAsync(collectionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> SpanCreateDeviceWithHttpInfoAsync(string collectionId, Device body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanCreateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanCreateDevice");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Device>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanCreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        public Device SpanDeleteDevice(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = SpanDeleteDeviceWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> SpanDeleteDeviceWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanDeleteDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanDeleteDevice");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanDeleteDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> SpanDeleteDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await SpanDeleteDeviceWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> SpanDeleteDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanDeleteDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanDeleteDevice");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanDeleteDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDataResponse</returns>
        public ListDataResponse SpanListDeviceData(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> localVarResponse = SpanListDeviceDataWithHttpInfo(collectionId, deviceId, limit, start, end, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> SpanListDeviceDataWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanListDeviceData");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanListDeviceData");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDataResponse>("/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListDeviceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDataResponse</returns>
        public async System.Threading.Tasks.Task<ListDataResponse> SpanListDeviceDataAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> localVarResponse = await SpanListDeviceDataWithHttpInfoAsync(collectionId, deviceId, limit, start, end, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListDataResponse>> SpanListDeviceDataWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanListDeviceData");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanListDeviceData");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDataResponse>("/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListDeviceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        public ListDevicesResponse SpanListDevices(string collectionId)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> localVarResponse = SpanListDevicesWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> SpanListDevicesWithHttpInfo(string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanListDevices");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDevicesResponse>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        public async System.Threading.Tasks.Task<ListDevicesResponse> SpanListDevicesAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> localVarResponse = await SpanListDevicesWithHttpInfoAsync(collectionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse>> SpanListDevicesWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanListDevices");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDevicesResponse>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanListDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        public Device SpanRetrieveDevice(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = SpanRetrieveDeviceWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> SpanRetrieveDeviceWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanRetrieveDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanRetrieveDevice");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanRetrieveDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> SpanRetrieveDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await SpanRetrieveDeviceWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> SpanRetrieveDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanRetrieveDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanRetrieveDevice");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanRetrieveDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SpanSendMessage(string collectionId, string deviceId, SendMessageRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = SpanSendMessageWithHttpInfo(collectionId, deviceId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Object> SpanSendMessageWithHttpInfo(string collectionId, string deviceId, SendMessageRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanSendMessage");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanSendMessage");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanSendMessage");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/collections/{collectionId}/devices/{deviceId}/to", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanSendMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SpanSendMessageAsync(string collectionId, string deviceId, SendMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Object> localVarResponse = await SpanSendMessageWithHttpInfoAsync(collectionId, deviceId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Object>> SpanSendMessageWithHttpInfoAsync(string collectionId, string deviceId, SendMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SpanSendMessage");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanSendMessage");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanSendMessage");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/collections/{collectionId}/devices/{deviceId}/to", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanSendMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device SpanUpdateDevice(string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = SpanUpdateDeviceWithHttpInfo(existingCollectionId, deviceId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> SpanUpdateDeviceWithHttpInfo(string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->SpanUpdateDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanUpdateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanUpdateDevice");

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Device>("/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanUpdateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> SpanUpdateDeviceAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await SpanUpdateDeviceWithHttpInfoAsync(existingCollectionId, deviceId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> SpanUpdateDeviceWithHttpInfoAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->SpanUpdateDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SpanUpdateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SpanUpdateDevice");


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Device>("/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpanUpdateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
