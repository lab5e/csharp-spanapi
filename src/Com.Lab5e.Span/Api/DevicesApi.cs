/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.2.4 curable-andres
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Lab5e.Span.Client;
using Com.Lab5e.Span.Model;

namespace Com.Lab5e.Span.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add message to oubox
        /// </summary>
        /// <remarks>
        /// Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>MessageDownstream</returns>
        MessageDownstream AddDownstreamMessage(string collectionId, string deviceId, AddDownstreamMessageRequest body);

        /// <summary>
        /// Add message to oubox
        /// </summary>
        /// <remarks>
        /// Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MessageDownstream</returns>
        ApiResponse<MessageDownstream> AddDownstreamMessageWithHttpInfo(string collectionId, string deviceId, AddDownstreamMessageRequest body);
        /// <summary>
        /// Create device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device CreateDevice(string collectionId, CreateDeviceRequest body);

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> CreateDeviceWithHttpInfo(string collectionId, CreateDeviceRequest body);
        /// <summary>
        /// Remove device.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>Device</returns>
        Device DeleteDevice(string collectionId, string deviceId);

        /// <summary>
        /// Remove device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> DeleteDeviceWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Delete outgoing message
        /// </summary>
        /// <remarks>
        /// Delete an outgoing (ie downstream) message from the outbox.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <returns>DeleteDownstreamMessageResponse</returns>
        DeleteDownstreamMessageResponse DeleteDownstreamMessage(string collectionId, string deviceId, string messageId);

        /// <summary>
        /// Delete outgoing message
        /// </summary>
        /// <remarks>
        /// Delete an outgoing (ie downstream) message from the outbox.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of DeleteDownstreamMessageResponse</returns>
        ApiResponse<DeleteDownstreamMessageResponse> DeleteDownstreamMessageWithHttpInfo(string collectionId, string deviceId, string messageId);
        /// <summary>
        /// Get issued certificate(s) for device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>DeviceCertificateResponse</returns>
        DeviceCertificateResponse DeviceCertificate(string collectionId, string deviceId);

        /// <summary>
        /// Get issued certificate(s) for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceCertificateResponse</returns>
        ApiResponse<DeviceCertificateResponse> DeviceCertificateWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Retrieve data from device
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDataResponse</returns>
        ListDataResponse ListDeviceData(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));

        /// <summary>
        /// Retrieve data from device
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        ApiResponse<ListDataResponse> ListDeviceDataWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));
        /// <summary>
        /// List devices in collection.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        ListDevicesResponse ListDevices(string collectionId);

        /// <summary>
        /// List devices in collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        ApiResponse<ListDevicesResponse> ListDevicesWithHttpInfo(string collectionId);
        /// <summary>
        /// List the messages in the outbox
        /// </summary>
        /// <remarks>
        /// List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDownstreamMessagesResponse</returns>
        ListDownstreamMessagesResponse ListDownstreamMessages(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));

        /// <summary>
        /// List the messages in the outbox
        /// </summary>
        /// <remarks>
        /// List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDownstreamMessagesResponse</returns>
        ApiResponse<ListDownstreamMessagesResponse> ListDownstreamMessagesWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));
        /// <summary>
        /// List incoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListUpstreamMessagesResponse</returns>
        ListUpstreamMessagesResponse ListUpstreamMessages(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));

        /// <summary>
        /// List incoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListUpstreamMessagesResponse</returns>
        ApiResponse<ListUpstreamMessagesResponse> ListUpstreamMessagesWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string));
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>Device</returns>
        Device RetrieveDevice(string collectionId, string deviceId);

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> RetrieveDeviceWithHttpInfo(string collectionId, string deviceId);
        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device UpdateDevice(string existingCollectionId, string deviceId, UpdateDeviceRequest body);

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> UpdateDeviceWithHttpInfo(string existingCollectionId, string deviceId, UpdateDeviceRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add message to oubox
        /// </summary>
        /// <remarks>
        /// Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageDownstream</returns>
        System.Threading.Tasks.Task<MessageDownstream> AddDownstreamMessageAsync(string collectionId, string deviceId, AddDownstreamMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add message to oubox
        /// </summary>
        /// <remarks>
        /// Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageDownstream)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageDownstream>> AddDownstreamMessageWithHttpInfoAsync(string collectionId, string deviceId, AddDownstreamMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> CreateDeviceAsync(string collectionId, CreateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> CreateDeviceWithHttpInfoAsync(string collectionId, CreateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> DeleteDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> DeleteDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete outgoing message
        /// </summary>
        /// <remarks>
        /// Delete an outgoing (ie downstream) message from the outbox.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDownstreamMessageResponse</returns>
        System.Threading.Tasks.Task<DeleteDownstreamMessageResponse> DeleteDownstreamMessageAsync(string collectionId, string deviceId, string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete outgoing message
        /// </summary>
        /// <remarks>
        /// Delete an outgoing (ie downstream) message from the outbox.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDownstreamMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDownstreamMessageResponse>> DeleteDownstreamMessageWithHttpInfoAsync(string collectionId, string deviceId, string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get issued certificate(s) for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceCertificateResponse</returns>
        System.Threading.Tasks.Task<DeviceCertificateResponse> DeviceCertificateAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get issued certificate(s) for device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceCertificateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceCertificateResponse>> DeviceCertificateWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve data from device
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDataResponse</returns>
        System.Threading.Tasks.Task<ListDataResponse> ListDeviceDataAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve data from device
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDataResponse>> ListDeviceDataWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List devices in collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        System.Threading.Tasks.Task<ListDevicesResponse> ListDevicesAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List devices in collection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDevicesResponse>> ListDevicesWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the messages in the outbox
        /// </summary>
        /// <remarks>
        /// List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDownstreamMessagesResponse</returns>
        System.Threading.Tasks.Task<ListDownstreamMessagesResponse> ListDownstreamMessagesAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the messages in the outbox
        /// </summary>
        /// <remarks>
        /// List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDownstreamMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDownstreamMessagesResponse>> ListDownstreamMessagesWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List incoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUpstreamMessagesResponse</returns>
        System.Threading.Tasks.Task<ListUpstreamMessagesResponse> ListUpstreamMessagesAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List incoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUpstreamMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUpstreamMessagesResponse>> ListUpstreamMessagesWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> RetrieveDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> RetrieveDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> UpdateDeviceAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </remarks>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> UpdateDeviceWithHttpInfoAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IDevicesApiSync, IDevicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private Com.Lab5e.Span.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(string basePath)
        {
            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                new Com.Lab5e.Span.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(Com.Lab5e.Span.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Lab5e.Span.Client.Configuration.MergeConfigurations(
                Com.Lab5e.Span.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Lab5e.Span.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DevicesApi(Com.Lab5e.Span.Client.ISynchronousClient client, Com.Lab5e.Span.Client.IAsynchronousClient asyncClient, Com.Lab5e.Span.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Lab5e.Span.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Lab5e.Span.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Lab5e.Span.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Lab5e.Span.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add message to oubox Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>MessageDownstream</returns>
        public MessageDownstream AddDownstreamMessage(string collectionId, string deviceId, AddDownstreamMessageRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<MessageDownstream> localVarResponse = AddDownstreamMessageWithHttpInfo(collectionId, deviceId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add message to oubox Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MessageDownstream</returns>
        public Com.Lab5e.Span.Client.ApiResponse<MessageDownstream> AddDownstreamMessageWithHttpInfo(string collectionId, string deviceId, AddDownstreamMessageRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->AddDownstreamMessage");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->AddDownstreamMessage");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->AddDownstreamMessage");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageDownstream>("/span/collections/{collectionId}/devices/{deviceId}/outbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDownstreamMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add message to oubox Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageDownstream</returns>
        public async System.Threading.Tasks.Task<MessageDownstream> AddDownstreamMessageAsync(string collectionId, string deviceId, AddDownstreamMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<MessageDownstream> localVarResponse = await AddDownstreamMessageWithHttpInfoAsync(collectionId, deviceId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add message to oubox Add a new message in the outgoing queue to the device. If there is other messages in the outbox these messages will be sent first.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageDownstream)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<MessageDownstream>> AddDownstreamMessageWithHttpInfoAsync(string collectionId, string deviceId, AddDownstreamMessageRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->AddDownstreamMessage");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->AddDownstreamMessage");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->AddDownstreamMessage");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageDownstream>("/span/collections/{collectionId}/devices/{deviceId}/outbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDownstreamMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device CreateDevice(string collectionId, CreateDeviceRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = CreateDeviceWithHttpInfo(collectionId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> CreateDeviceWithHttpInfo(string collectionId, CreateDeviceRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->CreateDevice");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->CreateDevice");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Device>("/span/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> CreateDeviceAsync(string collectionId, CreateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await CreateDeviceWithHttpInfoAsync(collectionId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> CreateDeviceWithHttpInfoAsync(string collectionId, CreateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->CreateDevice");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->CreateDevice");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Device>("/span/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>Device</returns>
        public Device DeleteDevice(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = DeleteDeviceWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove device. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> DeleteDeviceWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDevice");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Device>("/span/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> DeleteDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await DeleteDeviceWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove device. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> DeleteDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDevice");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Device>("/span/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete outgoing message Delete an outgoing (ie downstream) message from the outbox.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <returns>DeleteDownstreamMessageResponse</returns>
        public DeleteDownstreamMessageResponse DeleteDownstreamMessage(string collectionId, string deviceId, string messageId)
        {
            Com.Lab5e.Span.Client.ApiResponse<DeleteDownstreamMessageResponse> localVarResponse = DeleteDownstreamMessageWithHttpInfo(collectionId, deviceId, messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete outgoing message Delete an outgoing (ie downstream) message from the outbox.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of DeleteDownstreamMessageResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<DeleteDownstreamMessageResponse> DeleteDownstreamMessageWithHttpInfo(string collectionId, string deviceId, string messageId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDownstreamMessage");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDownstreamMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'messageId' when calling DevicesApi->DeleteDownstreamMessage");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteDownstreamMessageResponse>("/span/collections/{collectionId}/devices/{deviceId}/outbox/{messageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDownstreamMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete outgoing message Delete an outgoing (ie downstream) message from the outbox.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDownstreamMessageResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDownstreamMessageResponse> DeleteDownstreamMessageAsync(string collectionId, string deviceId, string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<DeleteDownstreamMessageResponse> localVarResponse = await DeleteDownstreamMessageWithHttpInfoAsync(collectionId, deviceId, messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete outgoing message Delete an outgoing (ie downstream) message from the outbox.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDownstreamMessageResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<DeleteDownstreamMessageResponse>> DeleteDownstreamMessageWithHttpInfoAsync(string collectionId, string deviceId, string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDownstreamMessage");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDownstreamMessage");
            }

            // verify the required parameter 'messageId' is set
            if (messageId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'messageId' when calling DevicesApi->DeleteDownstreamMessage");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteDownstreamMessageResponse>("/span/collections/{collectionId}/devices/{deviceId}/outbox/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDownstreamMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued certificate(s) for device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>DeviceCertificateResponse</returns>
        public DeviceCertificateResponse DeviceCertificate(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<DeviceCertificateResponse> localVarResponse = DeviceCertificateWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued certificate(s) for device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceCertificateResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<DeviceCertificateResponse> DeviceCertificateWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeviceCertificate");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCertificate");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceCertificateResponse>("/span/collections/{collectionId}/devices/{deviceId}/certs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeviceCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get issued certificate(s) for device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceCertificateResponse</returns>
        public async System.Threading.Tasks.Task<DeviceCertificateResponse> DeviceCertificateAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<DeviceCertificateResponse> localVarResponse = await DeviceCertificateWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get issued certificate(s) for device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceCertificateResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<DeviceCertificateResponse>> DeviceCertificateWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeviceCertificate");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeviceCertificate");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceCertificateResponse>("/span/collections/{collectionId}/devices/{deviceId}/certs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeviceCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve data from device List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDataResponse</returns>
        public ListDataResponse ListDeviceData(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> localVarResponse = ListDeviceDataWithHttpInfo(collectionId, deviceId, limit, start, end, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data from device List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> ListDeviceDataWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDeviceData");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDeviceData");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDataResponse>("/span/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeviceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve data from device List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDataResponse</returns>
        public async System.Threading.Tasks.Task<ListDataResponse> ListDeviceDataAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDataResponse> localVarResponse = await ListDeviceDataWithHttpInfoAsync(collectionId, deviceId, limit, start, end, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve data from device List the data received from the device. Use the query parameters to control what data you retrieve. The  maximum number of data points is 100.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListDataResponse>> ListDeviceDataWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDeviceData");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDeviceData");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDataResponse>("/span/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeviceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices in collection. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        public ListDevicesResponse ListDevices(string collectionId)
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> localVarResponse = ListDevicesWithHttpInfo(collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices in collection. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> ListDevicesWithHttpInfo(string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDevices");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDevicesResponse>("/span/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices in collection. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDevicesResponse</returns>
        public async System.Threading.Tasks.Task<ListDevicesResponse> ListDevicesAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse> localVarResponse = await ListDevicesWithHttpInfoAsync(collectionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices in collection. 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListDevicesResponse>> ListDevicesWithHttpInfoAsync(string collectionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDevices");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDevicesResponse>("/span/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the messages in the outbox List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListDownstreamMessagesResponse</returns>
        public ListDownstreamMessagesResponse ListDownstreamMessages(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDownstreamMessagesResponse> localVarResponse = ListDownstreamMessagesWithHttpInfo(collectionId, deviceId, limit, start, end, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the messages in the outbox List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListDownstreamMessagesResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListDownstreamMessagesResponse> ListDownstreamMessagesWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDownstreamMessages");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDownstreamMessages");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDownstreamMessagesResponse>("/span/collections/{collectionId}/devices/{deviceId}/outbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDownstreamMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the messages in the outbox List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDownstreamMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListDownstreamMessagesResponse> ListDownstreamMessagesAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListDownstreamMessagesResponse> localVarResponse = await ListDownstreamMessagesWithHttpInfoAsync(collectionId, deviceId, limit, start, end, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the messages in the outbox List messages that should be sent to the device when it connects to the service. The messages are sent to the device when it connects to the service and either sends a message (via UDP or CoAP) or requests a message via CoAP GET request.option
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDownstreamMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListDownstreamMessagesResponse>> ListDownstreamMessagesWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDownstreamMessages");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDownstreamMessages");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDownstreamMessagesResponse>("/span/collections/{collectionId}/devices/{deviceId}/outbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDownstreamMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List incoming messages Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ListUpstreamMessagesResponse</returns>
        public ListUpstreamMessagesResponse ListUpstreamMessages(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListUpstreamMessagesResponse> localVarResponse = ListUpstreamMessagesWithHttpInfo(collectionId, deviceId, limit, start, end, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming messages Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <returns>ApiResponse of ListUpstreamMessagesResponse</returns>
        public Com.Lab5e.Span.Client.ApiResponse<ListUpstreamMessagesResponse> ListUpstreamMessagesWithHttpInfo(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListUpstreamMessages");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListUpstreamMessages");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUpstreamMessagesResponse>("/span/collections/{collectionId}/devices/{deviceId}/inbox", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUpstreamMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List incoming messages Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUpstreamMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListUpstreamMessagesResponse> ListUpstreamMessagesAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<ListUpstreamMessagesResponse> localVarResponse = await ListUpstreamMessagesWithHttpInfoAsync(collectionId, deviceId, limit, start, end, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming messages Retrieve a list of incoming (ie upstream) messages, ie messages sent from the device to the service.  These messages are buffered in the service until they expire.   Use the query parameters to limit the number of messages to return. If no limit is specified the default limit of 250 is used.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="offset">The message offset based on the message ID. This parameter can&#39;t be combined with the start and end parameters. If no parameter is set the first N messages will be returned. If this parameter is set the next N messages (from newest to oldest) with message ID less than the offset will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUpstreamMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<ListUpstreamMessagesResponse>> ListUpstreamMessagesWithHttpInfoAsync(string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string), string offset = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListUpstreamMessages");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListUpstreamMessages");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Lab5e.Span.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUpstreamMessagesResponse>("/span/collections/{collectionId}/devices/{deviceId}/inbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUpstreamMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>Device</returns>
        public Device RetrieveDevice(string collectionId, string deviceId)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = RetrieveDeviceWithHttpInfo(collectionId, deviceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> RetrieveDeviceWithHttpInfo(string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->RetrieveDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->RetrieveDevice");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Device>("/span/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> RetrieveDeviceAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await RetrieveDeviceWithHttpInfoAsync(collectionId, deviceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve device 
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="deviceId">The device ID is assigned by the backend.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> RetrieveDeviceWithHttpInfoAsync(string collectionId, string deviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->RetrieveDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->RetrieveDevice");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("collectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Device>("/span/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device UpdateDevice(string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = UpdateDeviceWithHttpInfo(existingCollectionId, deviceId, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update device The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public Com.Lab5e.Span.Client.ApiResponse<Device> UpdateDeviceWithHttpInfo(string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->UpdateDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->UpdateDevice");
            }

            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Device>("/span/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> UpdateDeviceAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Lab5e.Span.Client.ApiResponse<Device> localVarResponse = await UpdateDeviceWithHttpInfoAsync(existingCollectionId, deviceId, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update device The device can be moved from one collection to another by setting the collection ID field to the new  collection. You must have administrative access to both collections.
        /// </summary>
        /// <exception cref="Com.Lab5e.Span.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<Com.Lab5e.Span.Client.ApiResponse<Device>> UpdateDeviceWithHttpInfoAsync(string existingCollectionId, string deviceId, UpdateDeviceRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->UpdateDevice");
            }

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Com.Lab5e.Span.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->UpdateDevice");
            }


            Com.Lab5e.Span.Client.RequestOptions localVarRequestOptions = new Com.Lab5e.Span.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Com.Lab5e.Span.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("existingCollectionId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("deviceId", Com.Lab5e.Span.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Device>("/span/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
