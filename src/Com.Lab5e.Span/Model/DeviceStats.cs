/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.6.1 squirming-codi
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Lab5e.Span.Client.OpenAPIDateConverter;

namespace Com.Lab5e.Span.Model
{
    /// <summary>
    /// This is the statistics for a single device
    /// </summary>
    [DataContract(Name = "DeviceStats")]
    public partial class DeviceStats : IEquatable<DeviceStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceStats" /> class.
        /// </summary>
        /// <param name="bytesUpstreamMb">bytesUpstreamMb.</param>
        /// <param name="bytesDownstreamMb">bytesDownstreamMb.</param>
        /// <param name="messagesUpstream">messagesUpstream.</param>
        /// <param name="messagesDownstream">messagesDownstream.</param>
        /// <param name="sessionCount">sessionCount.</param>
        public DeviceStats(float bytesUpstreamMb = default(float), float bytesDownstreamMb = default(float), int messagesUpstream = default(int), int messagesDownstream = default(int), int sessionCount = default(int))
        {
            this.BytesUpstreamMb = bytesUpstreamMb;
            this.BytesDownstreamMb = bytesDownstreamMb;
            this.MessagesUpstream = messagesUpstream;
            this.MessagesDownstream = messagesDownstream;
            this.SessionCount = sessionCount;
        }

        /// <summary>
        /// Gets or Sets BytesUpstreamMb
        /// </summary>
        [DataMember(Name = "bytesUpstreamMb", EmitDefaultValue = false)]
        public float BytesUpstreamMb { get; set; }

        /// <summary>
        /// Gets or Sets BytesDownstreamMb
        /// </summary>
        [DataMember(Name = "bytesDownstreamMb", EmitDefaultValue = false)]
        public float BytesDownstreamMb { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUpstream
        /// </summary>
        [DataMember(Name = "messagesUpstream", EmitDefaultValue = false)]
        public int MessagesUpstream { get; set; }

        /// <summary>
        /// Gets or Sets MessagesDownstream
        /// </summary>
        [DataMember(Name = "messagesDownstream", EmitDefaultValue = false)]
        public int MessagesDownstream { get; set; }

        /// <summary>
        /// Gets or Sets SessionCount
        /// </summary>
        [DataMember(Name = "sessionCount", EmitDefaultValue = false)]
        public int SessionCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceStats {\n");
            sb.Append("  BytesUpstreamMb: ").Append(BytesUpstreamMb).Append("\n");
            sb.Append("  BytesDownstreamMb: ").Append(BytesDownstreamMb).Append("\n");
            sb.Append("  MessagesUpstream: ").Append(MessagesUpstream).Append("\n");
            sb.Append("  MessagesDownstream: ").Append(MessagesDownstream).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceStats);
        }

        /// <summary>
        /// Returns true if DeviceStats instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceStats input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BytesUpstreamMb == input.BytesUpstreamMb ||
                    this.BytesUpstreamMb.Equals(input.BytesUpstreamMb)
                ) && 
                (
                    this.BytesDownstreamMb == input.BytesDownstreamMb ||
                    this.BytesDownstreamMb.Equals(input.BytesDownstreamMb)
                ) && 
                (
                    this.MessagesUpstream == input.MessagesUpstream ||
                    this.MessagesUpstream.Equals(input.MessagesUpstream)
                ) && 
                (
                    this.MessagesDownstream == input.MessagesDownstream ||
                    this.MessagesDownstream.Equals(input.MessagesDownstream)
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    this.SessionCount.Equals(input.SessionCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BytesUpstreamMb.GetHashCode();
                hashCode = (hashCode * 59) + this.BytesDownstreamMb.GetHashCode();
                hashCode = (hashCode * 59) + this.MessagesUpstream.GetHashCode();
                hashCode = (hashCode * 59) + this.MessagesDownstream.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
