/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.5.0 overwrought-dorla
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Lab5e.Span.Client.OpenAPIDateConverter;

namespace Com.Lab5e.Span.Model
{
    /// <summary>
    /// GatewayInetConfig
    /// </summary>
    [DataContract(Name = "GatewayInetConfig")]
    public partial class GatewayInetConfig : IEquatable<GatewayInetConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayInetConfig" /> class.
        /// </summary>
        /// <param name="dtlsEndpoint">dtlsEndpoint.</param>
        /// <param name="coapEndpoint">coapEndpoint.</param>
        /// <param name="mqttEndpoint">mqttEndpoint.</param>
        public GatewayInetConfig(string dtlsEndpoint = default(string), string coapEndpoint = default(string), string mqttEndpoint = default(string))
        {
            this.DtlsEndpoint = dtlsEndpoint;
            this.CoapEndpoint = coapEndpoint;
            this.MqttEndpoint = mqttEndpoint;
        }

        /// <summary>
        /// Gets or Sets DtlsEndpoint
        /// </summary>
        [DataMember(Name = "dtlsEndpoint", EmitDefaultValue = false)]
        public string DtlsEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CoapEndpoint
        /// </summary>
        [DataMember(Name = "coapEndpoint", EmitDefaultValue = false)]
        public string CoapEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets MqttEndpoint
        /// </summary>
        [DataMember(Name = "mqttEndpoint", EmitDefaultValue = false)]
        public string MqttEndpoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayInetConfig {\n");
            sb.Append("  DtlsEndpoint: ").Append(DtlsEndpoint).Append("\n");
            sb.Append("  CoapEndpoint: ").Append(CoapEndpoint).Append("\n");
            sb.Append("  MqttEndpoint: ").Append(MqttEndpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayInetConfig);
        }

        /// <summary>
        /// Returns true if GatewayInetConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayInetConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayInetConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DtlsEndpoint == input.DtlsEndpoint ||
                    (this.DtlsEndpoint != null &&
                    this.DtlsEndpoint.Equals(input.DtlsEndpoint))
                ) && 
                (
                    this.CoapEndpoint == input.CoapEndpoint ||
                    (this.CoapEndpoint != null &&
                    this.CoapEndpoint.Equals(input.CoapEndpoint))
                ) && 
                (
                    this.MqttEndpoint == input.MqttEndpoint ||
                    (this.MqttEndpoint != null &&
                    this.MqttEndpoint.Equals(input.MqttEndpoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DtlsEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.DtlsEndpoint.GetHashCode();
                }
                if (this.CoapEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.CoapEndpoint.GetHashCode();
                }
                if (this.MqttEndpoint != null)
                {
                    hashCode = (hashCode * 59) + this.MqttEndpoint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
