/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 5.0.5 contented-jamila
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Lab5e.Span.Client.OpenAPIDateConverter;

namespace Com.Lab5e.Span.Model
{
    /// <summary>
    /// This is statistics for an collection.
    /// </summary>
    [DataContract(Name = "CollectionStats")]
    public partial class CollectionStats : IEquatable<CollectionStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionStats" /> class.
        /// </summary>
        /// <param name="deviceCount">deviceCount.</param>
        /// <param name="outputCount">outputCount.</param>
        /// <param name="firmwareCount">firmwareCount.</param>
        /// <param name="blobCount">blobCount.</param>
        /// <param name="gatewayCount">gatewayCount.</param>
        /// <param name="devices">devices.</param>
        /// <param name="outputs">outputs.</param>
        /// <param name="firmware">firmware.</param>
        /// <param name="blobs">blobs.</param>
        /// <param name="gateways">gateways.</param>
        public CollectionStats(int deviceCount = default(int), int outputCount = default(int), int firmwareCount = default(int), int blobCount = default(int), int gatewayCount = default(int), DeviceStats devices = default(DeviceStats), OutputStats outputs = default(OutputStats), FirmwareStats firmware = default(FirmwareStats), BlobStats blobs = default(BlobStats), GatewayStats gateways = default(GatewayStats))
        {
            this.DeviceCount = deviceCount;
            this.OutputCount = outputCount;
            this.FirmwareCount = firmwareCount;
            this.BlobCount = blobCount;
            this.GatewayCount = gatewayCount;
            this.Devices = devices;
            this.Outputs = outputs;
            this.Firmware = firmware;
            this.Blobs = blobs;
            this.Gateways = gateways;
        }

        /// <summary>
        /// Gets or Sets DeviceCount
        /// </summary>
        [DataMember(Name = "deviceCount", EmitDefaultValue = false)]
        public int DeviceCount { get; set; }

        /// <summary>
        /// Gets or Sets OutputCount
        /// </summary>
        [DataMember(Name = "outputCount", EmitDefaultValue = false)]
        public int OutputCount { get; set; }

        /// <summary>
        /// Gets or Sets FirmwareCount
        /// </summary>
        [DataMember(Name = "firmwareCount", EmitDefaultValue = false)]
        public int FirmwareCount { get; set; }

        /// <summary>
        /// Gets or Sets BlobCount
        /// </summary>
        [DataMember(Name = "blobCount", EmitDefaultValue = false)]
        public int BlobCount { get; set; }

        /// <summary>
        /// Gets or Sets GatewayCount
        /// </summary>
        [DataMember(Name = "gatewayCount", EmitDefaultValue = false)]
        public int GatewayCount { get; set; }

        /// <summary>
        /// Gets or Sets Devices
        /// </summary>
        [DataMember(Name = "devices", EmitDefaultValue = false)]
        public DeviceStats Devices { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public OutputStats Outputs { get; set; }

        /// <summary>
        /// Gets or Sets Firmware
        /// </summary>
        [DataMember(Name = "firmware", EmitDefaultValue = false)]
        public FirmwareStats Firmware { get; set; }

        /// <summary>
        /// Gets or Sets Blobs
        /// </summary>
        [DataMember(Name = "blobs", EmitDefaultValue = false)]
        public BlobStats Blobs { get; set; }

        /// <summary>
        /// Gets or Sets Gateways
        /// </summary>
        [DataMember(Name = "gateways", EmitDefaultValue = false)]
        public GatewayStats Gateways { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CollectionStats {\n");
            sb.Append("  DeviceCount: ").Append(DeviceCount).Append("\n");
            sb.Append("  OutputCount: ").Append(OutputCount).Append("\n");
            sb.Append("  FirmwareCount: ").Append(FirmwareCount).Append("\n");
            sb.Append("  BlobCount: ").Append(BlobCount).Append("\n");
            sb.Append("  GatewayCount: ").Append(GatewayCount).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Firmware: ").Append(Firmware).Append("\n");
            sb.Append("  Blobs: ").Append(Blobs).Append("\n");
            sb.Append("  Gateways: ").Append(Gateways).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionStats);
        }

        /// <summary>
        /// Returns true if CollectionStats instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionStats input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeviceCount == input.DeviceCount ||
                    this.DeviceCount.Equals(input.DeviceCount)
                ) && 
                (
                    this.OutputCount == input.OutputCount ||
                    this.OutputCount.Equals(input.OutputCount)
                ) && 
                (
                    this.FirmwareCount == input.FirmwareCount ||
                    this.FirmwareCount.Equals(input.FirmwareCount)
                ) && 
                (
                    this.BlobCount == input.BlobCount ||
                    this.BlobCount.Equals(input.BlobCount)
                ) && 
                (
                    this.GatewayCount == input.GatewayCount ||
                    this.GatewayCount.Equals(input.GatewayCount)
                ) && 
                (
                    this.Devices == input.Devices ||
                    (this.Devices != null &&
                    this.Devices.Equals(input.Devices))
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    (this.Outputs != null &&
                    this.Outputs.Equals(input.Outputs))
                ) && 
                (
                    this.Firmware == input.Firmware ||
                    (this.Firmware != null &&
                    this.Firmware.Equals(input.Firmware))
                ) && 
                (
                    this.Blobs == input.Blobs ||
                    (this.Blobs != null &&
                    this.Blobs.Equals(input.Blobs))
                ) && 
                (
                    this.Gateways == input.Gateways ||
                    (this.Gateways != null &&
                    this.Gateways.Equals(input.Gateways))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DeviceCount.GetHashCode();
                hashCode = (hashCode * 59) + this.OutputCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FirmwareCount.GetHashCode();
                hashCode = (hashCode * 59) + this.BlobCount.GetHashCode();
                hashCode = (hashCode * 59) + this.GatewayCount.GetHashCode();
                if (this.Devices != null)
                {
                    hashCode = (hashCode * 59) + this.Devices.GetHashCode();
                }
                if (this.Outputs != null)
                {
                    hashCode = (hashCode * 59) + this.Outputs.GetHashCode();
                }
                if (this.Firmware != null)
                {
                    hashCode = (hashCode * 59) + this.Firmware.GetHashCode();
                }
                if (this.Blobs != null)
                {
                    hashCode = (hashCode * 59) + this.Blobs.GetHashCode();
                }
                if (this.Gateways != null)
                {
                    hashCode = (hashCode * 59) + this.Gateways.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
